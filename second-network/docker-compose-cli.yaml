# Copyright IBM Corp. All Rights Reserved.
#
# SPDX-License-Identifier: Apache-2.0
#
# 当前 compose 语法已经升级到了 version 3了。
version: '2'

# 官方文档的释义，大义是顶级的 volume 元素是为了在不同的 service 之间共享 volume 而准备的。
# You can mount a host path as part of a definition for a single service, and there is no need to define it in the top level volumes key.
# But, if you want to reuse a volume across multiple services, then define a named volume in the top-level volumes key. Use named volumes with services, swarms, and stack files.
volumes:
  # 这个语法相当于声明了若干个命名卷。不同的容器之间把相同的卷挂载到自己本地的路径里，就相当于打通了两个容器的数据共享。
  # 注意，命名卷的开头并不是路径形式的，所以不要求当前的 host 有这个名字的绝对路径或者相对路径。
  orderer.ORDERER_DOMAIN:
  peer0.ORG1_DOMAIN:
  peer1.ORG1_DOMAIN:
  peer0.ORG2_DOMAIN:
  peer1.ORG2_DOMAIN:
  # 可选的命名数据卷
  peer0.ORG3_DOMAIN:
  peer1.ORG3_DOMAIN:

# 一个顶级网络名称，供服务之间引用
networks:
  byfn:

services:
  orderer.ORDERER_DOMAIN:
    extends:
      file:   base/docker-compose-base.yaml
      service: orderer.ORDERER_DOMAIN
    # 在这里虽然可以覆盖 container name，但有必要么？
    container_name: orderer.ORDERER_DOMAIN
    networks:
      # 这是要加入的网络名称
      - byfn

  peer0.ORG1_DOMAIN:
    container_name: peer0.ORG1_DOMAIN
    extends:
      file:  base/docker-compose-base.yaml
      service: peer0.ORG1_DOMAIN
    networks:
      - byfn

  peer1.ORG1_DOMAIN:
    container_name: peer1.ORG1_DOMAIN
    extends:
      file:  base/docker-compose-base.yaml
      service: peer1.ORG1_DOMAIN
    networks:
      - byfn

  peer0.ORG2_DOMAIN:
    container_name: peer0.ORG2_DOMAIN
    extends:
      file:  base/docker-compose-base.yaml
      service: peer0.ORG2_DOMAIN
    networks:
      - byfn

  peer1.ORG2_DOMAIN:
    container_name: peer1.ORG2_DOMAIN
    extends:
      file:  base/docker-compose-base.yaml
      service: peer1.ORG2_DOMAIN
    networks:
      - byfn

  # 可选的实例化的 org3 的 peer。
  peer0.ORG3_DOMAIN:
    container_name: peer0.ORG3_DOMAIN
    extends:
      file:  base/docker-compose-base.yaml
      service: peer0.ORG3_DOMAIN
    networks:
      - byfn

  peer1.ORG3_DOMAIN:
    container_name: peer1.ORG3_DOMAIN
    extends:
      file:  base/docker-compose-base.yaml
      service: peer1.ORG3_DOMAIN
    networks:
      - byfn

  cli:
    container_name: cli
    # 这里不继承任何配置文件，而是直接使用镜像初始化容器
    image: hyperledger/fabric-tools:$IMAGE_TAG
    tty: true
    environment:
      - GOPATH=/opt/gopath
      # 这个地址是用来连接 var 上的 docker 守护进程的，似乎是用来启动链码容器用的？
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      - CORE_LOGGING_LEVEL=DEBUG
      - CORE_PEER_ID=cli
      - CORE_PEER_ADDRESS=peer0.ORG1_DOMAIN:7051
      - CORE_PEER_LOCALMSPID=Org1MSP
      - CORE_PEER_TLS_ENABLED=true
      - CORE_PEER_TLS_CERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/ORG1_DOMAIN/peers/peer0.ORG1_DOMAIN/tls/server.crt
      - CORE_PEER_TLS_KEY_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/ORG1_DOMAIN/peers/peer0.ORG1_DOMAIN/tls/server.key
      - CORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/ORG1_DOMAIN/peers/peer0.ORG1_DOMAIN/tls/ca.crt
      - CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/ORG1_DOMAIN/users/Admin@ORG1_DOMAIN/msp
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
    # 容器运行的时候，就会在内部的 console 里启动这段命令。类似我们经常 docker run 使用的 /bin/bash 一样。
    # 在这里我们传导了两个关键的环境变量进去，一个频道名，一个延迟。这也是目前唯二的还能在 cli 容器启动时改变的东西了。
    command: /bin/bash -c './scripts/script.sh ${CHANNEL_NAME} ${DELAY}; sleep $TIMEOUT'
    volumes:
        # host 上路径: 容器内路径
        # 映射本机的运行时配置文件到容器内。
        - /var/run/:/host/var/run/
        # ：这就是链码的主要位置了，看来这个目录也是镜像里就写死的，要写自定义的链码也只能从这里安装进去。
        - ./../chaincode/:/opt/gopath/src/github.com/hyperledger/fabric/examples/chaincode/go
        - ./crypto-config:/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/
        - ./scripts:/opt/gopath/src/github.com/hyperledger/fabric/peer/scripts/
        - ./channel-artifacts:/opt/gopath/src/github.com/hyperledger/fabric/peer/channel-artifacts
    depends_on:
      # 等这些 service 启动完了，再启动自己这个 service。
      - orderer.ORDERER_DOMAIN
      - peer0.ORG1_DOMAIN
      - peer1.ORG1_DOMAIN
      - peer0.ORG2_DOMAIN
      - peer1.ORG2_DOMAIN
    networks:
      - byfn

